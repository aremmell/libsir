/*
 * chsir_basename.chf
 *
 * -----------------------------------------------------------------------------
 *
 * basename from: $OpenBSD: basename.c,v 1.17  2020/10/20 19:30:14 naddy Exp $
 *
 * -----------------------------------------------------------------------------
 *
 * SPDX-License-Identifier: ISC and MIT
 *
 * Copyright (c) 1997, 2004 Todd C. Miller <millert@openbsd.org>
 * Copyright (c) 2018-2023 Jeffrey H. Johnson <trnsz@pobox.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * -----------------------------------------------------------------------------
 */

#include <errno.h>
#include <libgen.h>
#include <limits.h>
#include <string.h>

char*
chsir_basename(char *path) {
    static char bname[PATH_MAX];
    size_t      len;
    const char* endp;
    const char* startp;

    if (path == NULL || *path == '\0') {
        bname[0] = '.';
        bname[1] = '\0';

        return bname;
    }

    endp = path + chsir_strnlen(path, PATH_MAX) - 1;
    while (endp > path && *endp == '/')
        endp--;

    if (endp == path && *endp == '/') {
        bname[0] = '/';
        bname[1] = '\0';

        return bname;
    }

    startp = endp;
    while (startp > path && *(startp - 1) != '/')
        startp--;

    len = endp - startp + 1;
    if (len >= sizeof(bname)) {
        errno = ENAMETOOLONG;

        return NULL;
    }

    (void)memcpy(bname, startp, len);
    bname[len] = '\0';

    return bname;
}
